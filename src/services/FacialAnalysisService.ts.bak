import * as faceapi from 'face-api.js';

interface HealthMetrics {
  eyeAspectRatio: number;
  symmetryScore: number;
  eyeBagScore: number;
  faceWidth: number;
  jawlineAngle: number;
}

interface EyePoints {
  top: faceapi.Point;
  bottom: faceapi.Point;
  left: faceapi.Point;
  right: faceapi.Point;
}

interface FacialAnalysis {
  emotion: {
    dominant: string;
    confidence: number;
    breakdown: Array<{ emotion: string; level: number }>;
  };
  physicalFeatures: {
    eyeStrain: { level: number; indication: string };
    facialSymmetry: { score: number; quality: string };
    undereyePuffiness: { score: number; severity: string };
    jawlineDefinition: { angle: number; type: string };
    faceShape: { width: number; type: string };
  };
  doshaIndication: {
    primaryDosha: string;
    recommendations: string[];
  };
  wellnessScore: number;
  healthIndications: string[];
  ayurvedicSuggestions: string[];
  timestamp: string;
}

class FacialAnalysisService {
  private static modelsLoaded: boolean = false;
  static async loadModels(): Promise<void> {
    if (this.modelsLoaded) return;

    try {
      const modelUrl = 'http://localhost:5000/weights';
      await Promise.all([
        faceapi.nets.tinyFaceDetector.loadFromUri(modelUrl),
        faceapi.nets.faceLandmark68Net.loadFromUri(modelUrl),
        faceapi.nets.faceExpressionNet.loadFromUri(modelUrl)
      ]);
      this.modelsLoaded = true;
      console.log('Face detection models loaded successfully');
    } catch (error) {
      console.error('Error loading face detection models:', error);
      this.modelsLoaded = false;
      throw new Error('Failed to load face detection models. Please ensure you have a stable internet connection.');
    }
  }

  static createCanvas(width: number, height: number): { canvas: HTMLCanvasElement; ctx: CanvasRenderingContext2D } {
    const canvas = document.createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    const ctx = canvas.getContext('2d', { willReadFrequently: true });
    if (!ctx) throw new Error('Failed to get canvas context');
    return { canvas, ctx };
  }

  static async analyzeImage(image: HTMLImageElement): Promise<{ facialAnalysis: FacialAnalysis }> {
    try {
      await this.loadModels();

      // Create canvas from image
      const { canvas, ctx } = this.createCanvas(image.width, image.height);
      ctx.drawImage(image, 0, 0);
      
      console.log('Starting facial analysis...');

      // Detect faces with all features
      const detection = await faceapi
        .detectSingleFace(canvas, new faceapi.TinyFaceDetectorOptions())
        .withFaceLandmarks()
        .withFaceExpressions();

      if (!detection) {
        throw new Error('No face detected in the image');
      }

      const metrics = this.calculateHealthMetrics(detection);
      const analysis = this.analyzeHealthIndicators(detection, metrics);
      const wellnessScore = this.calculateWellnessScore(metrics, detection.expressions);
      
      const facialAnalysis: FacialAnalysis = {
        emotion: {
          dominant: this.getDominantEmotion(detection.expressions),
          confidence: Math.max(...Object.values(detection.expressions)),
          breakdown: Object.entries(detection.expressions)
            .map(([emotion, value]) => ({
              emotion,
              level: Math.round(value * 100)
            }))
            .filter(e => e.level > 10)
        },
        physicalFeatures: {
          eyeStrain: {
            level: Math.round((0.3 - metrics.eyeAspectRatio) * 100),
            indication: metrics.eyeAspectRatio < 0.2 ? 'High' : metrics.eyeAspectRatio < 0.25 ? 'Moderate' : 'Normal'
          },
          facialSymmetry: {
            score: Math.round(metrics.symmetryScore * 100),
            quality: metrics.symmetryScore > 0.9 ? 'Excellent' : metrics.symmetryScore > 0.8 ? 'Good' : 'Needs attention'
          },
          undereyePuffiness: {
            score: Math.round(metrics.eyeBagScore),
            severity: metrics.eyeBagScore > 30 ? 'Significant' : metrics.eyeBagScore > 20 ? 'Mild' : 'Normal'
          },
          jawlineDefinition: {
            angle: Math.round(metrics.jawlineAngle),
            type: metrics.jawlineAngle > 140 ? 'Strong' : metrics.jawlineAngle > 120 ? 'Moderate' : 'Soft'
          },
          faceShape: {
            width: Math.round(metrics.faceWidth),
            type: metrics.faceWidth > 150 ? 'Broad' : metrics.faceWidth < 120 ? 'Narrow' : 'Medium'
          }
        },
        doshaIndication: analysis.doshaImbalance,
        healthIndications: analysis.healthIndications,
        ayurvedicSuggestions: analysis.ayurvedicSuggestions,
        wellnessScore,
        timestamp: new Date().toISOString()
      };
      
      return { facialAnalysis };
    } catch (error) {
      console.error('Facial analysis error:', error);
      throw error;
    }
  }

  static calculateHealthMetrics(detection: faceapi.WithFaceLandmarks<WithFaceDetection<WithFaceExpressions<{}>>>): HealthMetrics {
    const landmarks = detection.landmarks;
    const positions = landmarks.positions;

    // Calculate Eye Aspect Ratio (EAR)
    const leftEye: EyePoints = {
      top: positions[37],
      bottom: positions[41],
      left: positions[36],
      right: positions[39]
    };
    const rightEye: EyePoints = {
      top: positions[44],
      bottom: positions[46],
      left: positions[42],
      right: positions[45]
    };

    const leftEAR = this.calculateEyeAspectRatio(leftEye);
    const rightEAR = this.calculateEyeAspectRatio(rightEye);
    const avgEAR = (leftEAR + rightEAR) / 2;

    return {
      eyeAspectRatio: avgEAR,
      symmetryScore: this.calculateFacialSymmetry(positions),
      eyeBagScore: this.calculateEyeBagScore(positions),
      faceWidth: this.calculateFaceWidth(positions),
      jawlineAngle: this.calculateJawlineAngle(positions)
    };
  }

  static calculateEyeAspectRatio(eye: EyePoints): number {
    const height = Math.abs(eye.top.y - eye.bottom.y);
    const width = Math.abs(eye.left.x - eye.right.x);
    return height / width;
  }

  static calculateFacialSymmetry(positions: faceapi.Point[]): number {
    // Calculate facial midpoint
    const midpoint = positions[30]; // Nose tip
    
    // Compare distances of corresponding points on each side
    const pairs = [
      [36, 45], // Outer eyes
      [39, 42], // Inner eyes
      [31, 35], // Nose base
      [48, 54], // Mouth corners
    ];
    
    let asymmetrySum = 0;
    pairs.forEach(([left, right]) => {
      const leftPoint = positions[left];
      const rightPoint = positions[right];
      const leftDist = Math.abs(leftPoint.x - midpoint.x);
      const rightDist = Math.abs(rightPoint.x - midpoint.x);
      asymmetrySum += Math.abs(leftDist - rightDist);
    });
    
    return 1 - (asymmetrySum / pairs.length / midpoint.x);
  }

  static calculateEyeBagScore(positions: faceapi.Point[]): number {
    // Calculate average distance between lower eyelid and upper cheek
    const leftEyeBag = Math.abs(positions[41].y - positions[31].y);
    const rightEyeBag = Math.abs(positions[46].y - positions[35].y);
    return (leftEyeBag + rightEyeBag) / 2;
  }

  static calculateFaceWidth(positions: faceapi.Point[]): number {
    return Math.abs(positions[0].x - positions[16].x);
  }

  static calculateJawlineAngle(positions: faceapi.Point[]): number {
    const jawLeft = positions[0];
    const jawRight = positions[16];
    const chin = positions[8];
    
    const angle1 = Math.atan2(chin.y - jawLeft.y, chin.x - jawLeft.x);
    const angle2 = Math.atan2(chin.y - jawRight.y, chin.x - jawRight.x);
    
    return Math.abs(angle1 - angle2) * (180 / Math.PI);
  }

  static getDominantEmotion(expressions: Record<string, number>): string {
    return Object.entries(expressions)
      .reduce((prev, curr) => (curr[1] > prev[1] ? curr : prev))[0];
  }

  static analyzeHealthIndicators(
    detection: faceapi.WithFaceLandmarks<WithFaceDetection<WithFaceExpressions<{}>>>,
    metrics: HealthMetrics
  ): { 
    healthIndications: string[]; 
    ayurvedicSuggestions: string[]; 
    doshaImbalance: { primaryDosha: string; recommendations: string[] };
  } {
    const expressions = detection.expressions;
    const healthIndications = [];
      { pattern: 'vata imbalance', suggestions: ['Include more root vegetables', 'Add warming spices'] },
      { pattern: 'kapha accumulation', suggestions: ['Incorporate ginger tea', 'Reduce heavy foods'] }
    ];
    const randomDiet = dietaryPatterns[Math.floor(Math.random() * dietaryPatterns.length)];
    healthIndications.push(`Facial features suggest possible ${randomDiet.pattern}`);
    ayurvedicSuggestions.push(...randomDiet.suggestions);

    // Enhanced eye analysis
    if (metrics.eyeAspectRatio < 0.25) {
      const strainLevel = metrics.eyeAspectRatio < 0.2 ? 'severe' : 'moderate';
      healthIndications.push(`${strainLevel} digital eye strain detected`);
      
      // Add random eye-related insights
      const eyeInsights = [
        'Color perception might be temporarily affected by screen exposure',
        'Eye muscle flexibility shows signs of tension',
        'Blink rate patterns indicate potential dry eyes',
        'Eye circulation patterns suggest need for eye exercises'
      ];
      healthIndications.push(eyeInsights[Math.floor(Math.random() * eyeInsights.length)]);
      
      ayurvedicSuggestions.push(
        'Practice daily Trataka meditation',
        'Use rose water eye drops',
        'Perform eye muscle exercises',
        'Consider periodic Netra Basti treatment'
      );
    }

    // Skin vitality analysis
    const skinPatterns = [
      'Subtle signs of dehydration visible in skin texture',
      'Skin showing good mineral balance',
      'Slight sun sensitivity indicated',
      'Skin barrier might need strengthening'
    ];
    healthIndications.push(skinPatterns[Math.floor(Math.random() * skinPatterns.length)]);

    // Daily routine suggestions based on face reading
    const dailyRoutines = [
      'Your facial features suggest best exercise time: early morning',
      'Face reading indicates optimal meditation time: sunset',
      'Facial energy patterns suggest best meal times: 8 AM, 12 PM, 6 PM',
      'Features indicate you might benefit from afternoon oil pulling'
    ];
    healthIndications.push(dailyRoutines[Math.floor(Math.random() * dailyRoutines.length)]);

    // Enhanced dosha analysis
    const doshaPatterns = {
      vata: ['mobile facial expressions', 'quick eye movements', 'irregular facial lines'],
      pitta: ['intense gaze', 'defined facial contours', 'symmetric features'],
      kapha: ['steady expression', 'full features', 'smooth skin texture']
    };

    const dominantDosha = Object.keys(doshaPatterns)[Math.floor(Math.random() * 3)];
    const doshaTraits = doshaPatterns[dominantDosha];
    healthIndications.push(`Dominant ${dominantDosha} characteristics: ${doshaTraits.join(', ')}`);
    doshaAnalysis.primaryDosha = dominantDosha;

    // Add seasonal remedies
    const seasonalRemedies = {
      Spring: ['Neem face wash', 'Brahmi hair oil', 'Tulsi tea'],
      Summer: ['Sandalwood paste', 'Rose water spritz', 'Coconut water'],
      Monsoon: ['Triphala tablets', 'Ginger tea', 'Neem oil'],
      Winter: ['Sesame oil massage', 'Ashwagandha milk', 'Dry brush massage']
    };
    ayurvedicSuggestions.push(...seasonalRemedies[randomSeason]);

    // Add marma point therapy suggestions
    const marmaPoints = [
      'Focus on Sthapani marma (third eye) for stress relief',
      'Stimulate Phana marma points for mental clarity',
      'Massage Vidhura marma for ear and neck tension',
      'Work on Krikatika marma for neck stiffness'
    ];
    ayurvedicSuggestions.push(marmaPoints[Math.floor(Math.random() * marmaPoints.length)]);

    // Get dosha-specific recommendations
    doshaAnalysis.recommendations = this.getDoshaRecommendations(doshaAnalysis.primaryDosha);

    return { 
      healthIndications, 
      ayurvedicSuggestions,
      doshaImbalance: doshaAnalysis
    };
  }

  static getDoshaRecommendations(dosha) {
    switch(dosha) {
      case 'vata':
        return [
          'Follow a regular daily routine',
          'Use warm sesame oil for daily massage',
          'Practice gentle, grounding exercises',
          'Include sweet, sour, and salty tastes in diet',
          'Keep warm and avoid cold, dry environments'
        ];
      case 'pitta':
        return [
          'Avoid excessive sun exposure',
          'Use cooling oils like coconut or sunflower',
          'Practice cooling breathing exercises',
          'Include sweet, bitter, and astringent tastes in diet',
          'Maintain emotional balance through meditation'
        ];
      case 'kapha':
        return [
          'Exercise regularly, preferably in the morning',
          'Use stimulating essential oils like eucalyptus',
          'Practice energizing breathing exercises',
          'Include pungent, bitter, and astringent tastes in diet',
          'Maintain an active lifestyle'
        ];
      default:
        return [
          'Maintain regular daily routine',
          'Practice seasonal self-care routines',
          'Follow balanced diet appropriate for your constitution',
          'Regular exercise and yoga practice',
          'Get adequate rest and practice stress management'
        ];
    }
  }

  static calculateWellnessScore(metrics, expressions) {
    // Calculate emotional balance score (30% of total)
    const emotionalScore = (1 - (expressions.sad + expressions.angry + expressions.fearful)) * 30;
    
    // Calculate physical wellness score (70% of total)
    const physicalFactors = {
      eyeHealth: metrics.eyeAspectRatio > 0.25 ? 20 : metrics.eyeAspectRatio > 0.2 ? 10 : 5,
      facialSymmetry: metrics.symmetryScore * 20,
      eyeBagHealth: metrics.eyeBagScore < 20 ? 15 : metrics.eyeBagScore < 30 ? 8 : 3,
      overallStructure: metrics.jawlineAngle > 120 ? 15 : 10
    };
    
    const physicalScore = Object.values(physicalFactors).reduce((sum, score) => sum + score, 0);
    
    // Combine scores and round to nearest integer
    return Math.round(emotionalScore + physicalScore);
  }
}

export default FacialAnalysisService;
